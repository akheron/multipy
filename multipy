#!/bin/sh
#
# "multipy" is free software; you can redistribute it and/or modify
# it under the terms of the MIT license. See LICENSE for details.
#

PYTHON_VERSIONS="2.4 2.5 2.6 2.7 3.0 3.1 3.2"
PYTHON_URL_TEMPLATE="http://www.python.org/ftp/python/%s/Python-%s.tgz"
DISTRIBUTE_BASEURL="http://pypi.python.org/packages/source/d/distribute/"

### utils ###

error() {
    echo "Error: $1" >&2
}

die() {
    [ -n "$1" ] && error "$1"
    [ -n "$2" ] && echo "For logs, see $tempdir/*.log" >&2
    exit 1
}

# Usage: append VAR STRING
append() {
    eval local tmp=\$$1
    if [ -n "$tmp" ]; then
        tmp="$tmp $2"
    else
        tmp=$2
    fi
    eval $1=\$tmp
}

# http://rubinium.org/blog/archives/2010/04/05/shell-script-version-compare-vercmp/
version_cmp() {
    expr '(' "$1" : '\([^.]*\)' ')' '-' '(' "$2" : '\([^.]*\)' ')' '|' \
        '(' "$1.0" : '[^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0" : '[^.]*[.]\([^.]*\)' ')' '|' \
        '(' "$1.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '|' \
        '(' "$1.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')'
}

is_supported_version() {
    local version
    for version in $PYTHON_VERSIONS; do
        [ "$1" = "$version" ] && return
    done

    # Not found
    return 1
}

# Assigns variables: versions
get_version_args() {
    local version invalid

    if [ -z "$1" ]; then
        error "No Python versions specified!"
        return 1
    fi

    if [ "$*" = "all" ]; then
        versions=$PYTHON_VERSIONS
    else
        versions=$*

        for version in $versions; do
            is_supported_version $version || append invalid "$version"
        done

        if [ -n "$invalid" ]; then
            error "Invalid/unsupported Python version(s): $invalid"
            return 1
        fi
    fi
}

# Assigns variables: version
get_version_arg() {
    local v

    if [ -z "$1" ]; then
        error "No Python version specified!"
        return 1
    fi

    for v in $*; do
        if [ -n "$version" ]; then
            error "Single version expected"
            return 1
        fi
        if ! is_supported_version $v; then
            error "Invalid/unsupported Python version: $v"
            return 1
        fi
        version=$v
    done
}

is_installed() {
    [ -e $pythondir/$1 ]
}

# Assigns variables: tarball
download_python() {
    local v url
    mkdir -p $sourcedir

    echo "    Checking for latest version..."
    for micro in $(seq 9 -1 0); do
        [ "$micro" != "0" ] && v=$1.$micro || v=$1
        url=$(printf "$PYTHON_URL_TEMPLATE" $v $v)

        if wget -q --spider "$url"; then
            echo "    Found latest version: $v"
            tarball=$sourcedir/Python-$v.tgz

            if [ -e $tarball ]; then
                echo "    Python-$v.tgz already downloaded"
            else
                echo "    Downloading..."
                wget -q -P $sourcedir "$url" || return 1
            fi
            return
        fi
    done
    return 1
}

# Assigns variables: latest_distribute
install_distribute() {
    local pyversion=$1
    local version versions tarball srcdir python

    if [ -z "$latest_distribute" ]; then
        echo "    Checking for latest version of distribute..."

        wget -q -O $tempdir/index.html $DISTRIBUTE_BASEURL || return 1

        versions=$(grep -E '>distribute-[0-9.]+.tar.gz</a>' $tempdir/index.html | sed -r -e 's%.*>distribute-([0-9.]+).tar.gz</a>.*%\1%')

        latest_distribute=0
        for version in $versions; do
            if [ "$(version_cmp $version $latest_distribute)" -gt 0 ]; then
                latest_distribute=$version
            fi
        done

        echo "    Found latest version: $latest_distribute"

        tarball=distribute-$latest_distribute.tar.gz
        if [ ! -e "$tarball" ]; then
            echo "    Downloading distribute..."
            wget -q -P $sourcedir "$DISTRIBUTE_BASEURL/$tarball" || return 1
        else
            echo "    $tarball already downloaded"
        fi

        echo "    Unpacking distribute..."
        rm -rf $tempdir/$tarball
        gunzip -c $sourcedir/$tarball | tar -C $tempdir -xf - || return 1
    fi

    echo "    Installing distribute..."
    srcdir=$tempdir/distribute-$latest_distribute
    python=$pythondir/$pyversion/bin/python$pyversion
    (cd $srcdir && $python setup.py install) \
        > $tempdir/install-distribute.$pyversion.log 2>&1 \
        || return 1
}


### commands ###

install() {
    local versions version installed=0
    get_version_args "$@" || die # -> versions

    mkdir -p $tempdir

    for version in $versions; do
        if is_installed $version; then
            echo "Python $version already installed, skipping"
            continue
        fi

        echo "Installing Python $version..."

        download_python $version || die "Unable to download Python $version"
        srcdir=$tempdir/${tarball##*/}
        srcdir=${srcdir%.tgz}

        echo "    Unpacking..."
        rm -rf $srcdir
        gunzip -c $tarball | tar -C $tempdir -xf - || die "Unpack failed"

        echo "    Configuring..."
        (cd $srcdir && ./configure --prefix=$pythondir/$version) \
            >$tempdir/configure.$version.log 2>&1 \
            || die "Configure failed" 1

        echo "    Compiling..."
        (cd $srcdir && make) \
            >$tempdir/compile.$version.log 2>&1 \
            || die "Compile failed" 1

        echo "    Installing..."
        (cd $srcdir && make install) \
            >$tempdir/install.$version.log 2>&1 \
            || die "Install failed" 1

        if [ $no_distribute -eq 0 ]; then
            install_distribute $version || die "Unable to install distribute" 1
        fi
        installed=1
    done

    if [ $installed -eq 1 ]; then
        # Remove temporary files (disable with -k)
        if [ $keep_tmp -eq 0 ]; then
            echo "Cleaning up..."
            rm -rf $tempdir/*
        fi
        echo "All done."
    fi
}

remove() {
    local versions version
    get_version_args "$@" || die # -> versions

    for version in $versions; do
        is_installed $version || continue

        echo "Removing Python $version..."
        rm -rf $pythondir/$version
    done

    echo "All done."
}

list() {
    local version
    for version in $PYTHON_VERSIONS; do
        is_installed $version && echo $version
    done
}

path() {
    local version
    get_version_arg "$@" || die # -> version

    is_installed $version || die "Python $version is not installed"
    echo $pythondir/$version
}

### main ###

usage() {
    cat >&2 <<EOF
Usage: $0 [options] command [args...]

Commands:
    install version...|all
        Installs the given Python versions or all supported versions.

    remove version...|all
        Removes the given Python version or all installed versions.

    list
        Lists installed Python versions

    path version
        Print the path to the top directory of the given Python
        version, e.g. /home/user/multipy/pythons/2.6.

Options:
    -b BASEDIR   The base directory [default: ~/multipy]
    -k           Keep temporary files and logs after installation
    -n           Don't install distribute

Copyright (C) 2011 Petri Lehtinen. Licenced under the MIT license.

EOF
    exit 2
}

basedir=$HOME/multipy
no_distribute=0
keep_tmp=0

while getopts "b:kn" opt; do
    case $opt in
        b)
            basedir=$OPTARG
            ;;
        n)
            no_distribute=1
            ;;
        k)
            keep_tmp=1
            ;;
        \?)
            echo >&2
            usage
            ;;
    esac
done

# Make basedir absolute
[ "${basedir%/}" = "$basedir" ] && basedir=$(pwd)/$basedir

pythondir=$basedir/pythons
sourcedir=$basedir/sources
tempdir=$basedir/tmp

# No more arguments
[ "$opt" = "--" ] && usage

shift $(expr $OPTIND - 1)

cmd=$1
shift

case $cmd in
    install|remove|list|path)
        ;;
    *)
        usage
        ;;
esac

$cmd "$@"
